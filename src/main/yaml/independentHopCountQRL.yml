incarnation: scafi

variables:
  random: &random
    min: 0
    max: 1
    step: 1
    default: 0
  episodes: &episodes
    formula: 100
  episode: &episode
    min: 0
    max: *episodes
    step: 1
    default: 0
  learn: &learn
    formula: 'episode!=episodes'
  range: &range
    formula: 8.0
  save_every: &save_every
    formula: 'episodes/10'
  stop_right_source: &stop_right_source
    formula: 35

environment:
  type: Continuous2DEnvironment
  parameters: []

network-model:
  type: ConnectWithinDistance #*connectionType
  parameters: [*range]

export:
  - time
  - molecule: refG
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: classicHopCount
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: rlbasedHopCount
    aggregators: [mean]
    value-filter: onlyfinite
  - molecule: err_classicHopCount
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: err_rlbasedHopCount
    aggregators: [sum]
    value-filter: onlyfinite
  - molecule: reward
    aggregators: [ mean ]
    value-filter: onlyfinite
seeds:
  scenario: *random
  simulation: *random

deployments:
  - type: Grid
    parameters: [0, 0, 100, 20, 5, 5, 3.5, 3.5, 0.0, 0.0] #large
    #parameters: [5, 5, 50, 20, 5, 5, 3.5, 3.5, 0.0, 0.0] #medium
    #parameters: [5, 5, 15, 20, 5, 5, 3.5, 3.5, 0.0, 0.0] #small
    # xStart: Double, yStart: Double, xEnd: Double, yEnd: Double, xStep: Double, yStep: Double, xRand: Double, yRand: Double, xShift: Double, yShift: Double
    #type: GeometricGradientRectangle
    #parameters: [100, 0, 0, 100, 20, 0.6, 20, true, true]
    #           # nodes, x, y, sizex, sizey, lambda, step, horizontal, decreasing
    programs:
      - time-distribution:
          type: ExponentialTime
          parameters: [1]
        type: Event
        actions:
          - type: RunScafiProgram
            parameters: [it.unibo.casestudy.IndependentsLearnersHopCount, 5.0] # second argument is retention time
      - program: send

    contents:
      - molecule: range
        concentration: *range
      - molecule: classicHopCount
        concentration: 0
      - molecule: rlbasedHopCount
        concentration: 0
      - molecule: refG
        concentration: 0
      - molecule: err_classicHopCount
        concentration: 0
      - molecule: err_rlbasedHopCount
        concentration: 0
      - molecule: reward
        concentration: 0
      - molecule: learn
        concentration: *learn
      - molecule: episode
        concentration: *episode
      - molecule: stop_right_source
        concentration: *stop_right_source
      - molecule: left_source
        concentration: 40 #40
      - molecule: right_source
        concentration: 59 #59


  - type: Point
    parameters: [1000,1000]
    programs:
      - time-distribution:
          type: Trigger
          parameters: [ 100.0 ]
        type: Event
        actions: { type: it.unibo.Progress, parameters: [ qf ] }

    contents:
      - molecule: range
        concentration: *range
      - molecule: classicHopCount
        concentration: 0
      - molecule: rlbasedHopCount
        concentration: 0
      - molecule: refG
        concentration: 0
      - molecule: err_classicHopCount
        concentration: 0
      - molecule: err_rlbasedHopCount
        concentration: 0
      - molecule: reward
        concentration: 0
      - molecule: learn
        concentration: *learn
      - molecule: episode
        concentration: *episode
      - molecule: print_every
        concentration: *save_every